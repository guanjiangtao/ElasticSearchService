// Package ElasticSearchServiceApp comment
// This file was generated by tars2go 1.1.7
// Generated from WebApi.tars
package ElasticSearchServiceApp

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"github.com/TarsCloud/TarsGo/tars/util/trace"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = codec.FromInt8
	_ = unsafe.Pointer(nil)
	_ = bytes.ErrTooLarge
)

// WebApi struct
type WebApi struct {
	servant m.Servant
}

// Update is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) Update(id int32, docType string, data []Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteInt32(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(docType, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range data {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "Update", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// UpdateWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) UpdateWithContext(tarsCtx context.Context, id int32, docType string, data []Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteInt32(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(docType, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range data {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	traceData, ok := current.GetTraceData(tarsCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["id"] = id
			value["docType"] = docType
			value["data"] = data
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Update", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "Update", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Update", int(resp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// UpdateOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) UpdateOneWayWithContext(tarsCtx context.Context, id int32, docType string, data []Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteInt32(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(docType, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range data {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "Update", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// Insert is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) Insert(data []Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.LIST, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range data {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "Insert", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// InsertWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) InsertWithContext(tarsCtx context.Context, data []Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.LIST, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range data {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	traceData, ok := current.GetTraceData(tarsCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["data"] = data
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Insert", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "Insert", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Insert", int(resp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// InsertOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) InsertOneWayWithContext(tarsCtx context.Context, data []Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.LIST, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range data {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "Insert", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// Delete is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) Delete(id int32, docType string, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteInt32(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(docType, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "Delete", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// DeleteWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) DeleteWithContext(tarsCtx context.Context, id int32, docType string, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteInt32(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(docType, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(tarsCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["id"] = id
			value["docType"] = docType
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Delete", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "Delete", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Delete", int(resp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// DeleteOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) DeleteOneWayWithContext(tarsCtx context.Context, id int32, docType string, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteInt32(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(docType, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "Delete", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// BulkInsert is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) BulkInsert(data map[string]Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for k0, v0 := range data {

		err = buf.WriteString(k0, 0)
		if err != nil {
			return ret, err
		}

		err = v0.WriteBlock(buf, 1)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "BulkInsert", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// BulkInsertWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) BulkInsertWithContext(tarsCtx context.Context, data map[string]Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for k1, v1 := range data {

		err = buf.WriteString(k1, 0)
		if err != nil {
			return ret, err
		}

		err = v1.WriteBlock(buf, 1)
		if err != nil {
			return ret, err
		}

	}

	traceData, ok := current.GetTraceData(tarsCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["data"] = data
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, tars.GetClientConfig().ModuleName, obj.servant.Name(), "BulkInsert", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "BulkInsert", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, tars.GetClientConfig().ModuleName, obj.servant.Name(), "BulkInsert", int(resp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// BulkInsertOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) BulkInsertOneWayWithContext(tarsCtx context.Context, data map[string]Data, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for k2, v2 := range data {

		err = buf.WriteString(k2, 0)
		if err != nil {
			return ret, err
		}

		err = v2.WriteBlock(buf, 1)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "BulkInsert", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// Search is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) Search(data map[string]string, opts ...map[string]string) (ret []Data, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for k3, v3 := range data {

		err = buf.WriteString(k3, 0)
		if err != nil {
			return ret, err
		}

		err = buf.WriteString(v3, 1)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "Search", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	_, ty, err = readBuf.SkipToNoCheck(0, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		ret = make([]Data, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = ret[i4].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// SearchWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) SearchWithContext(tarsCtx context.Context, data map[string]string, opts ...map[string]string) (ret []Data, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for k5, v5 := range data {

		err = buf.WriteString(k5, 0)
		if err != nil {
			return ret, err
		}

		err = buf.WriteString(v5, 1)
		if err != nil {
			return ret, err
		}

	}

	traceData, ok := current.GetTraceData(tarsCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["data"] = data
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Search", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "Search", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	_, ty, err = readBuf.SkipToNoCheck(0, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		ret = make([]Data, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = ret[i6].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		tars.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, tars.GetClientConfig().ModuleName, obj.servant.Name(), "Search", int(resp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// SearchOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *WebApi) SearchOneWayWithContext(tarsCtx context.Context, data map[string]string, opts ...map[string]string) (ret []Data, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len(data)), 0)
	if err != nil {
		return ret, err
	}

	for k7, v7 := range data {

		err = buf.WriteString(k7, 0)
		if err != nil {
			return ret, err
		}

		err = buf.WriteString(v7, 1)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "Search", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// SetServant sets servant for the service.
func (obj *WebApi) SetServant(servant m.Servant) {
	obj.servant = servant
}

// TarsSetTimeout sets the timeout for the servant which is in ms.
func (obj *WebApi) TarsSetTimeout(timeout int) {
	obj.servant.TarsSetTimeout(timeout)
}

// TarsSetProtocol sets the protocol for the servant.
func (obj *WebApi) TarsSetProtocol(p m.Protocol) {
	obj.servant.TarsSetProtocol(p)
}

// AddServant adds servant  for the service.
func (obj *WebApi) AddServant(imp WebApiServant, servantObj string) {
	tars.AddServant(obj, imp, servantObj)
}

// AddServantWithContext adds servant  for the service with context.
func (obj *WebApi) AddServantWithContext(imp WebApiServantWithContext, servantObj string) {
	tars.AddServantWithContext(obj, imp, servantObj)
}

type WebApiServant interface {
	Update(id int32, docType string, data []Data) (ret int32, err error)
	Insert(data []Data) (ret int32, err error)
	Delete(id int32, docType string) (ret int32, err error)
	BulkInsert(data map[string]Data) (ret int32, err error)
	Search(data map[string]string) (ret []Data, err error)
}
type WebApiServantWithContext interface {
	Update(tarsCtx context.Context, id int32, docType string, data []Data) (ret int32, err error)
	Insert(tarsCtx context.Context, data []Data) (ret int32, err error)
	Delete(tarsCtx context.Context, id int32, docType string) (ret int32, err error)
	BulkInsert(tarsCtx context.Context, data map[string]Data) (ret int32, err error)
	Search(tarsCtx context.Context, data map[string]string) (ret []Data, err error)
}

// Dispatch is used to call the server side implement for the method defined in the tars file. withContext shows using context or not.
func (obj *WebApi) Dispatch(tarsCtx context.Context, val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, withContext bool) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	readBuf := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	buf := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "Update":
		var id int32
		var docType string
		var data []Data

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadInt32(&id, 1, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadString(&docType, 2, true)
			if err != nil {
				return err
			}

			_, ty, err = readBuf.SkipToNoCheck(3, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = readBuf.ReadInt32(&length, 0, true)
				if err != nil {
					return err
				}

				data = make([]Data, length)
				for i8, e8 := int32(0), length; i8 < e8; i8++ {

					err = data[i8].ReadBlock(readBuf, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SimpleList {
				err = fmt.Errorf("not support SimpleList type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadInt32(&id, 0, true)
			if err != nil {
				return err
			}

			reqTup.GetBuffer("docType", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&docType, 0, true)
			if err != nil {
				return err
			}

			reqTup.GetBuffer("data", &tupBuffer)
			readBuf.Reset(tupBuffer)
			_, ty, err = readBuf.SkipToNoCheck(0, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = readBuf.ReadInt32(&length, 0, true)
				if err != nil {
					return err
				}

				data = make([]Data, length)
				for i9, e9 := int32(0), length; i9 < e9; i9++ {

					err = data[i9].ReadBlock(readBuf, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SimpleList {
				err = fmt.Errorf("not support SimpleList type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}
			{
				jsonStr, _ := json.Marshal(jsonData["docType"])
				if err = json.Unmarshal(jsonStr, &docType); err != nil {
					return err
				}
			}
			{
				jsonStr, _ := json.Marshal(jsonData["data"])
				if err = json.Unmarshal(jsonStr, &data); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tarsCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["id"] = id
				value["docType"] = docType
				value["data"] = data
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Update", 0, traceParam, "")
		}

		var funRet int32
		if !withContext {
			imp := val.(WebApiServant)
			funRet, err = imp.Update(id, docType, data)
		} else {
			imp := val.(WebApiServantWithContext)
			funRet, err = imp.Update(tarsCtx, id, docType, data)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Update", 0, traceParam, "")
		}

	case "Insert":
		var data []Data

		if tarsReq.IVersion == basef.TARSVERSION {

			_, ty, err = readBuf.SkipToNoCheck(1, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = readBuf.ReadInt32(&length, 0, true)
				if err != nil {
					return err
				}

				data = make([]Data, length)
				for i10, e10 := int32(0), length; i10 < e10; i10++ {

					err = data[i10].ReadBlock(readBuf, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SimpleList {
				err = fmt.Errorf("not support SimpleList type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("data", &tupBuffer)
			readBuf.Reset(tupBuffer)
			_, ty, err = readBuf.SkipToNoCheck(0, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = readBuf.ReadInt32(&length, 0, true)
				if err != nil {
					return err
				}

				data = make([]Data, length)
				for i11, e11 := int32(0), length; i11 < e11; i11++ {

					err = data[i11].ReadBlock(readBuf, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SimpleList {
				err = fmt.Errorf("not support SimpleList type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["data"])
				if err = json.Unmarshal(jsonStr, &data); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tarsCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["data"] = data
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Insert", 0, traceParam, "")
		}

		var funRet int32
		if !withContext {
			imp := val.(WebApiServant)
			funRet, err = imp.Insert(data)
		} else {
			imp := val.(WebApiServantWithContext)
			funRet, err = imp.Insert(tarsCtx, data)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Insert", 0, traceParam, "")
		}

	case "Delete":
		var id int32
		var docType string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadInt32(&id, 1, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadString(&docType, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadInt32(&id, 0, true)
			if err != nil {
				return err
			}

			reqTup.GetBuffer("docType", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&docType, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}
			{
				jsonStr, _ := json.Marshal(jsonData["docType"])
				if err = json.Unmarshal(jsonStr, &docType); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tarsCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["id"] = id
				value["docType"] = docType
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Delete", 0, traceParam, "")
		}

		var funRet int32
		if !withContext {
			imp := val.(WebApiServant)
			funRet, err = imp.Delete(id, docType)
		} else {
			imp := val.(WebApiServantWithContext)
			funRet, err = imp.Delete(tarsCtx, id, docType)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Delete", 0, traceParam, "")
		}

	case "BulkInsert":
		var data map[string]Data
		data = make(map[string]Data)

		if tarsReq.IVersion == basef.TARSVERSION {

			_, err = readBuf.SkipTo(codec.MAP, 1, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			data = make(map[string]Data)
			for i12, e12 := int32(0), length; i12 < e12; i12++ {
				var k12 string
				var v12 Data

				err = readBuf.ReadString(&k12, 0, false)
				if err != nil {
					return err
				}

				err = v12.ReadBlock(readBuf, 1, false)
				if err != nil {
					return err
				}

				data[k12] = v12
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("data", &tupBuffer)
			readBuf.Reset(tupBuffer)
			_, err = readBuf.SkipTo(codec.MAP, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			data = make(map[string]Data)
			for i13, e13 := int32(0), length; i13 < e13; i13++ {
				var k13 string
				var v13 Data

				err = readBuf.ReadString(&k13, 0, false)
				if err != nil {
					return err
				}

				err = v13.ReadBlock(readBuf, 1, false)
				if err != nil {
					return err
				}

				data[k13] = v13
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["data"])
				if err = json.Unmarshal(jsonStr, &data); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tarsCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["data"] = data
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "BulkInsert", 0, traceParam, "")
		}

		var funRet int32
		if !withContext {
			imp := val.(WebApiServant)
			funRet, err = imp.BulkInsert(data)
		} else {
			imp := val.(WebApiServantWithContext)
			funRet, err = imp.BulkInsert(tarsCtx, data)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "BulkInsert", 0, traceParam, "")
		}

	case "Search":
		var data map[string]string
		data = make(map[string]string)

		if tarsReq.IVersion == basef.TARSVERSION {

			_, err = readBuf.SkipTo(codec.MAP, 1, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			data = make(map[string]string)
			for i14, e14 := int32(0), length; i14 < e14; i14++ {
				var k14 string
				var v14 string

				err = readBuf.ReadString(&k14, 0, false)
				if err != nil {
					return err
				}

				err = readBuf.ReadString(&v14, 1, false)
				if err != nil {
					return err
				}

				data[k14] = v14
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("data", &tupBuffer)
			readBuf.Reset(tupBuffer)
			_, err = readBuf.SkipTo(codec.MAP, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			data = make(map[string]string)
			for i15, e15 := int32(0), length; i15 < e15; i15++ {
				var k15 string
				var v15 string

				err = readBuf.ReadString(&k15, 0, false)
				if err != nil {
					return err
				}

				err = readBuf.ReadString(&v15, 1, false)
				if err != nil {
					return err
				}

				data[k15] = v15
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["data"])
				if err = json.Unmarshal(jsonStr, &data); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(tarsCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["data"] = data
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Search", 0, traceParam, "")
		}

		var funRet []Data
		if !withContext {
			imp := val.(WebApiServant)
			funRet, err = imp.Search(data)
		} else {
			imp := val.(WebApiServantWithContext)
			funRet, err = imp.Search(tarsCtx, data)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(funRet)), 0)
			if err != nil {
				return err
			}

			for _, v := range funRet {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(funRet)), 0)
			if err != nil {
				return err
			}

			for _, v := range funRet {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			tars.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, tars.GetClientConfig().ModuleName, tarsReq.SServantName, "Search", 0, traceParam, "")
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var statusMap map[string]string
	if status, ok := current.GetResponseStatus(tarsCtx); ok && status != nil {
		statusMap = status
	}
	var contextMap map[string]string
	if ctx, ok := current.GetResponseContext(tarsCtx); ok && ctx != nil {
		contextMap = ctx
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(buf.ToBytes()),
		Status:       statusMap,
		SResultDesc:  "",
		Context:      contextMap,
	}

	_ = readBuf
	_ = buf
	_ = length
	_ = have
	_ = ty
	return nil
}
